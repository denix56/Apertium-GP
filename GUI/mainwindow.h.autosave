#ifndef ApertiumGUI_H
#define ApertiumGUI_H
#include "headbutton.h"
#include <QMainWindow>
#include <QTextEdit>
#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkReply>
#include<QComboBox>
#include <QGridLayout>
#include <QDialog>
#include <QProcess>
#include<QScrollBar>
#include <QLabel>
#include <QSettings>
#include <QMap>
#include "settingsworker.h"
namespace Ui {
class ApertiumGUI;
}

class ApertiumGUI : public QMainWindow
{
    Q_OBJECT
friend class SettingsWorker;
public:
    explicit ApertiumGUI(QWidget *parent = 0);
    void resizeEvent(QResizeEvent*);
    ~ApertiumGUI();


signals:
    void listOfLangsSet();
private slots:
    //get available language pairs
    void createListOfLangs(QNetworkReply*);

    //update ComboBoxes when new source language, that is choosed
    void updateComboBox(int);

    //update ComboBox with Tatget Languages when the new one is choosed
    void updateEndComboBox(int);

    //Uncheck another Source language buttons when the new one is checked
    void clearAnotherSButtons();

    //update available Target languages
    void getResponseOfAvailLang(QNetworkReply*);

    //Uncheck another Target language buttons when the new one is checked
    void clearAnotherEButtons();

    //make requests synchronuous
    void sendRequestToAPY(QNetworkRequest*);

    //parse json response
    void getReplyFromAPY(QNetworkReply*);

    void fontSizeBox();
    void changeFontSize(int size);

    void fontSizeOk();

    void fontSizeCancel();

    //send translation request for each paragraph
    void createRequests(int blockNum = -1, bool addLine = false);

    void on_mru_currentTextChanged(const QString &currentText);

    void getLangFullNames(QNetworkReply*);

    //void timeout();
private:

    Ui::ApertiumGUI *ui;
    QVector <HeadButton*> SourceLangBtns;
    QVector <HeadButton*> TargetLangBtns;
    QString currentSLang, currentTargetLang;
    QNetworkAccessManager* requestSender;
    QUrl url;
    HeadButton* currentSButton;
    QDialog* selectPathes;
    QString serverPath;
    QString langPairsPath;
    QProcess* apy;
    QDialog* fSizeBox;
    QMap<QString, QString> langNamesMap;

    int lastBlockCount = 1;
    int currentFontSize;

    struct langpairUsed;
    const QString SERVERPATH = "path/serverPath";
    const QString LANGPATH = "path/langPath";
    const QString FONTSIZE = "view/fontSize";

    void closeEvent(QCloseEvent*);
    void changeFontSize();
    void loadSettings();


};

#endif // ApertiumGUI_H
